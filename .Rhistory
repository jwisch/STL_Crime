remotes::install_github("slu-openGIS/compstatr")
library(compstatr)
cs_last_update()
# create index
i <- cs_create_index()
# download full year
available_years <- seq(from = 2009, to = 2020, by = 1)
yearList <- list()
for(j in 1:length(available_years)){
yearList[[j]] <- cs_get_data(year = available_years[j], index = i)
}
yearList_2009 <- cs_get_data(year = 2009, index = 1)
yearList_2009 <- cs_get_data(year = 2009, index = i)
yearList_2009 <- cs_get_data(year = 2019, index = i)
View(yearList_2009)
download.file("javascript:__doPostBack('GridView1$ctl05$lnkdownloadD','')", "./RawCrimeFiles/201001.csv")
download.file("", "./RawCrimeFiles/201001.csv")
download.file("http://www.slmpd.org/Crimereports.shtml", "./RawCrimeFiles/201001.csv")
EPA_files <- list.files(path = "./RawCrimeFiles/", pattern="*.csv")
crime_files <- list.files(path = "./RawCrimeFiles/", pattern="*.csv")
crime_files <- list.files(path = "./RawCrimeFiles/", pattern="*.csv")
crime_file_list = lapply(paste0( "./RawCrimeFiles/", crime_files), read.csv)
library(data.table)
crime_files <- rbindlist(crime_file_list, fill = TRUE)
rm(crime_file_list)
head(crime_files)
table(crime_files$Description)
#gun related crimes:
gun_crimes <- unique(crime_files$Description)
gun_crimes <- substr(gun_crimes, "FIREARM")
gun_crimes
#gun related crimes:
gun_crimes <- unique(crime_files$Description)
gun_crimes <- str_subset(gun_crimes, "FIREARM")
library(stringr)
gun_crimes <- str_subset(gun_crimes, "FIREARM")
gun_crimes
gun_crimes <- c(gun_crimes, "HOMICIDE", "WEAPONS-CITY VIOL/DISCHRGING IN CITY",
"WEAPONS-STATE VIOL/UNLWFL USE/DISCHARGING")
gun_crimes
crime_files <- crime_files[crime_files$Description %in% gun_crimes,]
head(crime_files)
tail(crime_files)
str(crime_files$DateOccur)
crime_files$Date <- as.Date(crime_files$DateOccured, format = "%m/%d/%Y")
crime_files[is.na(crime_files$Date),]$Date <- as.Date(crime_files[is.na(crime_files$Date),]$DateOccur, format = "%m/%d/%Y")
head(crime_files)
tail(crime_files)
min(crime_files$Date)
max(crime_file$Date)
max(crime_files$Date)
#Using Chris Prener's package to pull STL crime data: https://github.com/slu-openGIS/compstatr
#It pulls metro STL crime data from here: http://www.slmpd.org/Crimereports.shtml
library(compstatr)
library(data.table)
library(stringr)
# create index
crime_files <- list.files(path = "./RawCrimeFiles/", pattern="*.csv")
crime_file_list = lapply(paste0( "./RawCrimeFiles/", crime_files), read.csv)
crime_files <- rbindlist(crime_file_list, fill = TRUE)
rm(crime_file_list)
crime_files <- crime_files[crime_files$Description %in% gun_crimes,]
crime_files$Date <- as.Date(crime_files$DateOccured, format = "%m/%d/%Y")
crime_files[is.na(crime_files$Date),]$Date <- as.Date(crime_files[is.na(crime_files$Date),]$DateOccur, format = "%m/%d/%Y")
min(crime_files$Date)
max(crime_files$Date)
tail(crime_files)
crime_files <- list.files(path = "./RawCrimeFiles/", pattern="*.csv")
crime_file_list = lapply(paste0( "./RawCrimeFiles/", crime_files), read.csv)
crime_file_list
crime_files
crime_files <- list.files(path = "./RawCrimeFiles/", pattern="*.csv")
crime_files
crime_files <- list.files(path = "./RawCrimeFiles/")
crime_files
crime_file_list = lapply(paste0( "./RawCrimeFiles/", crime_files), read.csv)
crime_files <- rbindlist(crime_file_list, fill = TRUE)
rm(crime_file_list)
#gun related crimes:
gun_crimes <- unique(crime_files$Description)
gun_crimes <- str_subset(gun_crimes, "FIREARM")
gun_crimes <- c(gun_crimes, "HOMICIDE", "WEAPONS-CITY VIOL/DISCHRGING IN CITY",
"WEAPONS-STATE VIOL/UNLWFL USE/DISCHARGING")
crime_files <- crime_files[crime_files$Description %in% gun_crimes,]
crime_files$Date <- as.Date(crime_files$DateOccured, format = "%m/%d/%Y")
crime_files[is.na(crime_files$Date),]$Date <- as.Date(crime_files[is.na(crime_files$Date),]$DateOccur, format = "%m/%d/%Y")
min(crime_files$Date)
max(crime_files$Date)
head(crime_files)
tail(crime_files)
summary(crime_files)
head(crime_files)
asin(902041.0 / 6371)
atan2(1021716, 902041.0)
crime_files_addresses <- crime_files[, c("ILEADSAddress", "ILEADSStreet")]
head(crime_files_addresses)
tail(crime_files_addresses)
crime_files_addresses <- unique(crime_files_addresses)
crime_files_addresses$CITY <- "St. Louis"
crime_files_addresses$STATE <- "MO"
head(crime_files_addresses)
tails(crime_files_addresses)
tail(crime_files_addresses)
saveRDS(crime_files_addresses, "./Processed_Data/Crime_Site_Addresses.RDS")
address_df <- readRDS("./Processed_Data/Crime_Site_Addresses.RDS")
head(address_df)
address_df$fullSearch <- paste0(address_df$ILEADSAddress, " ", address_df$ILEADSStreet ", ", address_df$CITY, ", ", address_df$STATE)
address_df$fullSearch <- paste0(address_df$ILEADSAddress, " ", address_df$ILEADSStreet, ", ", address_df$CITY, ", ", address_df$STATE)
head(address_df)
#geocoding.
#when address doesn't work for lat long,
#using street name without number (apparently a common bug relating to street length in osm)
#when neither of the above options work, using 9 digit zip
latLongs_address <- geocode_OSM(address_df$fullSearch[1])
library(osmar) #https://gis.stackexchange.com/questions/218072/how-can-i-use-roads-from-osm-data-in-r/218306
#geocoding.
#when address doesn't work for lat long,
#using street name without number (apparently a common bug relating to street length in osm)
#when neither of the above options work, using 9 digit zip
latLongs_address <- geocode_OSM(address_df$fullSearch[1])
library(tmap)
#geocoding.
#when address doesn't work for lat long,
#using street name without number (apparently a common bug relating to street length in osm)
#when neither of the above options work, using 9 digit zip
latLongs_address <- geocode_OSM(address_df$fullSearch[1])
options(osrm.server = "http://127.0.0.1:5000/", osrm.profile = "car")
#geocoding.
#when address doesn't work for lat long,
#using street name without number (apparently a common bug relating to street length in osm)
#when neither of the above options work, using 9 digit zip
latLongs_address <- geocode_OSM(address_df$fullSearch[1])
library(osmar) #https://gis.stackexchange.com/questions/218072/how-can-i-use-roads-from-osm-data-in-r/218306
library(tmap)
library(osmdata) #https://rforjournalists.com/2020/12/15/how-to-access-open-street-map-in-r/
library(sf)
library(pracma) #necessary for haversine funciton
library(gridExtra)
library(osrm) #https://github.com/riatelab/osrm
library(sf)
library(maptiles)
library(mapsf)
options(osrm.server = "http://127.0.0.1:5000/", osrm.profile = "car")
#geocoding.
#when address doesn't work for lat long,
#using street name without number (apparently a common bug relating to street length in osm)
#when neither of the above options work, using 9 digit zip
latLongs_address <- geocode_OSM(address_df$fullSearch[1])
??geocode_OSM()
library(tmaptools)
#geocoding.
#when address doesn't work for lat long,
#using street name without number (apparently a common bug relating to street length in osm)
#when neither of the above options work, using 9 digit zip
latLongs_address <- geocode_OSM(address_df$fullSearch[1])
latLongs_address
#geocoding.
#when address doesn't work for lat long,
#using street name without number (apparently a common bug relating to street length in osm)
#when neither of the above options work, using 9 digit zip
latLongs_address <- geocode_OSM(address_df$fullSearch[1:2])
latLongs_address
#geocoding.
#when address doesn't work for lat long,
#using street name without number (apparently a common bug relating to street length in osm)
#when neither of the above options work, using 9 digit zip
latLongs_address <- geocode_OSM(address_df$fullSearch)
head(latLongs_address)
tail(latLongs_address)
saveRDS(lagLongs_address, "./Processed_Data/Geocoded_Crime_Site_Addresses.RDS")
saveRDS(latLongs_address, "./Processed_Data/Geocoded_Crime_Site_Addresses.RDS")
missing_values <- address_df[!(address_df$fullSearch %in% latLongs_address$query),]
head(missing_values)
tail(missing_values)
write.csv(missing_values, "./Processed_Data/Missings_geocodes.csv", row.names = FALSE)
head(latLongs_address)
head(address_df)
head(crime_files)
proj4string <- "+proj=utm +zone=19 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs "
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
library(proj4)
install.packages("proj4")
proj4string <- "+proj=utm +zone=19 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs "
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
library(proj4)
proj4string <- "+proj=utm +zone=19 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs "
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
proj4string <- "+proj=utm +zone=15 +north +ellps=WGS84 +datum=WGS84 +units=m +no_defs "
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
proj4string <- "+proj=utm +zone=16 +north +ellps=WGS84 +datum=WGS84 +units=m +no_defs "
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
proj4string <- "+proj=utm +zone=15 +north +ellps=WGS84 +datum=WGS84 +units=m +no_defs "
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
head(address_df)
head(latLongs_address)
proj4string <- "+proj=utm +zone=15 +north +ellps=WGS84 +datum=WGS84 +units=m +no_defs "
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
proj4string <- "+proj=utm +zone=15 +north +ellps=NAD83 +datum=NAD83 +units=m +no_defs "
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
??project()
#The XCoord and YCoord fields are X- and Y-coordinates of the I/Leads incident
# location and in State Plane North American Datum 1983 (NAD83) format. This
# is a standard coordinate system for displaying regional/local geographic data in
# any desktop mapping application.
proj4string <- "+proj=utm +zone=15 +north +ellps=NAD83 +datum=NAD83 +units=m +no_defs +degrees = TRUE "
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE, degrees = TRUE)
#The XCoord and YCoord fields are X- and Y-coordinates of the I/Leads incident
# location and in State Plane North American Datum 1983 (NAD83) format. This
# is a standard coordinate system for displaying regional/local geographic data in
# any desktop mapping application.
proj4string <- "+proj=lcc +zone=15 +north +ellps=NAD83 +datum=NAD83 +units=m +no_defs "
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
utm
#The XCoord and YCoord fields are X- and Y-coordinates of the I/Leads incident
# location and in State Plane North American Datum 1983 (NAD83) format. This
# is a standard coordinate system for displaying regional/local geographic data in
# any desktop mapping application.
proj4string <- "+proj=utm +zone=15 +north +ellps=NAD83 +datum=NAD83 +units=m +no_defs "
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
#The XCoord and YCoord fields are X- and Y-coordinates of the I/Leads incident
# location and in State Plane North American Datum 1983 (NAD83) format. This
# is a standard coordinate system for displaying regional/local geographic data in
# any desktop mapping application.
proj4string <- "+proj=utm +zone=15 +north +ellps=NAD83 +datum=NAD83 +units=m +no_defs "
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
#The XCoord and YCoord fields are X- and Y-coordinates of the I/Leads incident
# location and in State Plane North American Datum 1983 (NAD83) format. This
# is a standard coordinate system for displaying regional/local geographic data in
# any desktop mapping application.
proj4string <- "+proj=utm +zone=15 +north +ellps=NAD83 +datum=NAD83 +units=m"
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
# Transformed data
pj <- project(xy, proj4string)
nad83_coords <- data.frame(x=902041.0, y= 1021716)
proj4string(nad83_coords)=CRS("+init=esri:102285")
library(rgdal)
nad83_coords <- data.frame(x=902041.0, y= 1021716)
proj4string(nad83_coords)=CRS("+init=esri:102285")
proj4string(nad83_coords)=CRS("+init=epsg:2804")
spTransform(nad83_coords,CRS("+init=epsg:4326"))
coordinates(nad83_coords) <- c('x', 'y')
proj4string(nad83_coords)=CRS("+init=epsg:2804")
spTransform(nad83_coords,CRS("+init=epsg:4326"))
spTransform(nad83_coords,CRS("+init=epsg:2804"))
nad83_coords <- data.frame(x=902041.0, y= 1021716)
coordinates(nad83_coords) <- c('x', 'y')
proj4string(nad83_coords)=CRS("+init=epsg:2804")
nad83_coords
nad83_coords$crs
str(nad83_coords)
spTransform(nad83_coords,CRS("+init=epsg:2804"))
spTransform(nad83_coords,CRS("+init=epsg:4267"))
spTransform(nad83_coords,CRS("+init=epsg:4269"))
spTransform(nad83_coords,CRS("+init=epsg:4326"))
nad83_coords <- data.frame(x=902041.0, y= 1021716)
coordinates(nad83_coords) <- c('x', 'y')
proj4string(nad83_coords)=CRS("+init=epsg:4326")
spTransform(nad83_coords,CRS("+init=epsg:4326"))
#The XCoord and YCoord fields are X- and Y-coordinates of the I/Leads incident
# location and in State Plane North American Datum 1983 (NAD83) format. This
# is a standard coordinate system for displaying regional/local geographic data in
# any desktop mapping application.
proj4string <- "+proj=longlat +zone=15 +north +ellps=NAD83 +datum=NAD83 +units=m +no_defs "
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
proj4string <- "+init=epsg:4269 +proj=longlat +ellps=GRS80 +datum=NAD83 +no_defs +towgs84=0,0,0"
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
library(compstatr)
# project data
tmp_sf <- cs_projectXY(crime_files[1:10,], varX = XCoord, varY = YCoord)
# project data
tmp_sf <- cs_projectXY(crime_files[1:10,], varX = XCoord, varY = YCoord)
# project data
tmp_sf <- cs_projectXY(crime_files[1:10,], varX = XCoord, varY = YCoord)
tmp_sf
head(crime_files)
head(crime_files$XCoord)
library(ggplot2)
ggplot() +
+   geom_sf(data = janHomicides_sf, color = "red", fill = NA, size = .5)
ggplot() +
+   geom_sf(data = tmp_sf, color = "red", fill = NA, size = .5)
# project data
tmp_sf <- crime_files[1:10,c("ILEADSAddress", "ILEADSStreet", "XCoord", "YCoord")]
tmp_sf <- cs_projectXY(tmp_sf, varX = XCoord, varY = YCoord)
tmp_sf
tmp_sf <- cs_projectXY(tmp_sf, varX = XCoord, varY = YCoord)
# preview data
mapview(tmp_sf)
library(mapview)
# preview data
mapview(tmp_sf)
library(ggplot2)
ggplot() +
+   geom_sf(data = tmp_sf, color = "red", fill = NA, size = .5)
ggplot() +
geom_sf(data = tmp_sf, color = "red", fill = NA, size = .5)
tmp_sf
#The XCoord and YCoord fields are X- and Y-coordinates of the I/Leads incident
# location and in State Plane North American Datum 1983 (NAD83) format. This
# is a standard coordinate system for displaying regional/local geographic data in
# any desktop mapping application.
proj4string <- "+proj=tmerc +zone=15 +north +ellps=NAD83 +datum=NAD83 +units=m +no_defs "
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
proj4string <- "+proj=tmerc +lat_0=35.83333333333334 +lon_0=-90.5 +k=0.9999333333333333 +x_0=250000 +y_0=0 +datum=NAD83 +units=us-ft +no_defs"
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
# project data
tmp_sf <- crime_files[1:10,c("ILEADSAddress", "ILEADSStreet", "XCoord", "YCoord")]
tmp_sf <- cs_projectXY(tmp_sf, varX = XCoord, varY = YCoord)
tmp_sf
ggplot() +
geom_sf(data = tmp_sf, color = "red", fill = NA, size = .5)
ggplot() +
geom_sf(data = tmp_sf, color = "red", fill = NA, size = 2)
p <- ggplot() +
geom_sf(data = tmp_sf, color = "red", fill = NA, size = 2)
View(p)
# preview data
p <- mapview(tmp_sf)
str(p)
View(p)
proj4string <- "+proj=tmerc +lat_0=35.83333333333334 +lon_0=-90.5 +k=0.9999333333333333 +x_0=250000 +y_0=0 +datum=NAD83 +units=us-ft +no_defs"
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string, inverse=TRUE)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
proj4string <- "+proj=tmerc +lat_0=35.83333333333334 +lon_0=-90.5 +k=0.9999333333333333 +x_0=250000 +y_0=0 +datum=NAD83 +units=us-ft +no_defs"
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
# Transformed data
pj <- project(xy, proj4string)
latlon <- data.frame(lat=pj$y, lon=pj$x)
str(xy)
proj4string <- "+proj=tmerc +lat_0=35.83333333333334 +lon_0=-90.5 +k=0.9999333333333333 +x_0=250000 +y_0=0 +datum=NAD83 +units=us-ft +no_defs"
# Source data
xy <- data.frame(x=902041.0, y= 1021716)
coordinates(xy) <- c('x', 'y')
# Transformed data
pj <- project(xy, proj4string)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
